{
	"info": {
		"_postman_id": "493c80af-0643-4151-81b1-9b45729f1cae",
		"name": "DXP.PI.AUT.CustomerManagement.NEG",
		"description": "ColecciÃ³n de Pruebas Integrales Automatizadas para la API Custommer Management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PruebasIntegrales",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "414efb9e-a470-48fe-b117-177d559b58e1",
						"exec": [
							"function validaValor(value,field){\r",
							"    value = value.trim();\r",
							"    value = value.replace( /\\s\\s+/g, ' ' ); // Reemplazo espacio al final por vacio\r",
							"    value = value.replace(/,/g, '#' ); // Remplazo pipe por coma\r",
							"\r",
							"    console.log (\"value (json):\"+value);\r",
							"    console.log (\"field (csv):\"+field);\r",
							"    \r",
							"       if(field == value){\r",
							"            return true;\r",
							"        }else{\r",
							"            return false;\r",
							"        }\r",
							"}\r",
							"\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"var contadorAcc = 0;\r",
							"pm.test(data.testname+\" Valida status 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"/*\r",
							"pm.test(\"Valida tiempo de espera menor a 300ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"*/\r",
							"pm.test(\"Validate field id\",()=> {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(validaValor(jsonData.id,data.id)).to.be.true;\r",
							"});\r",
							"pm.test(\"Validate field name\",()=> {\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(validaValor(jsonData.name,data.name)).to.be.true;\r",
							"});\r",
							"pm.test(\"Validate field lastName\",()=> {\r",
							"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
							"    pm.expect(validaValor(jsonData.lastName,data.lastName)).to.be.true;\r",
							"});\r",
							"pm.test(\"Validate field status\",()=> {\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"    pm.expect(validaValor(jsonData.status,data.status)).to.be.true;\r",
							"});\r",
							"pm.test(\"Validate field documentType\",()=> {\r",
							"    pm.expect(jsonData).to.have.property(\"documentType\");\r",
							"    pm.expect(validaValor(jsonData.documentType,data.documentType)).to.be.true;\r",
							"});\r",
							"pm.test(\"Validate field document\",()=> {\r",
							"    pm.expect(jsonData).to.have.property(\"document\");\r",
							"    pm.expect(validaValor(jsonData.document,data.document)).to.be.true;\r",
							"});\r",
							"pm.test(\"Validate field sex\",()=> {\r",
							"    pm.expect(jsonData).to.have.property(\"sex\");\r",
							"    pm.expect(validaValor(jsonData.sex,data.sex)).to.be.true;\r",
							"});\r",
							"pm.test(\"Validate field segment\",()=> {\r",
							"    pm.expect(jsonData).to.have.property(\"segment\");\r",
							"    pm.expect(validaValor(jsonData.segment,data.segment)).to.be.true;\r",
							"});\r",
							"//for(var i=0; i< jsonData.account.length; i++){\r",
							"_.each(jsonData.account, function(accounts) {\r",
							"    contadorAcc = contadorAcc +1; \r",
							"    if(contadorAcc=== 1){\r",
							"        pm.test(\"Validate first account id\",()=> {\r",
							"            pm.expect(accounts).to.have.property(\"id\");\r",
							"            pm.expect(validaValor(accounts.id,data.account_id)).to.be.true;\r",
							"        });\r",
							"        //console.log(\"JSON account.name:\"+accounts.name);\r",
							"        //console.log(\"FILE data.account.name:\"+data.account_name);\r",
							"        pm.test(\"Validate first account name\",()=> {\r",
							"            pm.expect(accounts).to.have.property(\"name\");\r",
							"            pm.expect(validaValor(accounts.name,data.account_name)).to.be.true;\r",
							"        });\r",
							"    }\r",
							"    if(contadorAcc === 2){\r",
							"        pm.test(\"Validate second account id\",()=> {\r",
							"            pm.expect(accounts).to.have.property(\"id\");\r",
							"            pm.expect(validaValor(accounts.id,data.account_id2)).to.be.true;\r",
							"        });\r",
							"        pm.test(\"Validate second account name\",()=> {\r",
							"            pm.expect(accounts).to.have.property(\"name\");\r",
							"            pm.expect(validaValor(accounts.name,data.account_name2)).to.be.true;\r",
							"        });            \r",
							"    }\r",
							"});\r",
							"_.each(jsonData.contactMedium, function(contacts) {\r",
							"    pm.test(\"Validate first city\",()=> {\r",
							"        pm.expect(contacts.characteristic).to.have.property(\"city\");\r",
							"        pm.expect(validaValor(contacts.characteristic.city,data.characteristic_city)).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Validate first country\",()=> {\r",
							"        pm.expect(contacts.characteristic).to.have.property(\"country\");\r",
							"        pm.expect(validaValor(contacts.characteristic.country,data.characteristic_country)).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Validate first stateOrProvince\",()=> {\r",
							"        pm.expect(contacts.characteristic).to.have.property(\"stateOrProvince\");\r",
							"        pm.expect(validaValor(contacts.characteristic.stateOrProvince,data.characteristic_stateOrProvince)).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Validate first addressId\",()=> {\r",
							"        pm.expect(contacts.characteristic).to.have.property(\"addressId\");\r",
							"        pm.expect(validaValor(contacts.characteristic.addressId,data.characteristic_addressId)).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Validate first address\",()=> {\r",
							"        //console.log(\"JSON acharacteristic.address:\"+contacts.characteristic.address); \r",
							"        //console.log(\"FILE characteristic.address:\"+data.characteristic_address);\r",
							"        pm.expect(contacts.characteristic).to.have.property(\"address\");\r",
							"        pm.expect(validaValor(contacts.characteristic.address,data.characteristic_address)).to.be.true;\r",
							"    });    \r",
							"    pm.test(\"Validate first locationId\",()=> {\r",
							"        pm.expect(contacts.characteristic).to.have.property(\"locationId\");\r",
							"        pm.expect(validaValor(contacts.characteristic.locationId,data.characteristic_locationId)).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Validate first location\",()=> {\r",
							"        pm.expect(contacts.characteristic).to.have.property(\"location\");\r",
							"        pm.expect(validaValor(contacts.characteristic.location,data.characteristic_location)).to.be.true;\r",
							"    });\r",
							"    pm.test(\"Validate first zoneId\",()=> {\r",
							"        pm.expect(contacts.characteristic).to.have.property(\"zoneId\");\r",
							"        pm.expect(validaValor(contacts.characteristic.zoneId,data.characteristic_zoneId)).to.be.true;\r",
							"    });        \r",
							"    pm.test(\"Validate first zone\",()=> {\r",
							"        console.log(\"JSON contacts.characteristic.zone:\"+contacts.characteristic.zone); \r",
							"        console.log(\"FILE data.characteristic_zone:\"+data.characteristic_zone);\r",
							"        pm.expect(contacts.characteristic).to.have.property(\"zone\");\r",
							"        pm.expect(validaValor(contacts.characteristic.zone,data.characteristic_zone)).to.be.true;\r",
							"    });        \r",
							"    pm.test(\"Validate first isUrban\",()=> {\r",
							"        pm.expect(contacts.characteristic).to.have.property(\"isUrban\");\r",
							"        pm.expect(validaValor(contacts.characteristic.isUrban,data.characteristic_isUrban)).to.be.true;\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/CustomerManagement/v1/customer/ip/{{ip}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"CustomerManagement",
						"v1",
						"customer",
						"ip",
						"{{ip}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}