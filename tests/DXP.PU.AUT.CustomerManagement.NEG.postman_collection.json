{
	"info": {
		"_postman_id": "5bc5a119-f681-4146-9e55-8dab390309cb",
		"name": "DXP.PU.AUT.CustomerManagement.NEG",
		"description": "Colecci√≥n de Pruebas Unitarias Automatizadas para la API Custommer Management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "DXP.PU.AUT.CustomerManagement.NEG.customer/ip correcto y campo status activo",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "70cf07b5-51f7-4087-8aa5-6bfb395b24c7",
						"exec": [
							"// Functions",
							"function validaCampoArroba(field){",
							"    var texto=\"\";",
							"    for(var i=0; i<field.length; i++){",
							"        var aux = field.split(\":\");",
							"        for(var j=1;j<aux[1].length; j++){",
							"            texto = texto.concat(aux[1][j]);",
							"            if(aux[1][j+1] === \"\\\"\"){",
							"                j=aux[1].length;",
							"            }",
							"        }",
							"        i=field.length;",
							"    }",
							"    return texto;",
							"}",
							"",
							"// Variable declarations",
							"var jsonData = JSON.parse(responseBody);",
							"var auxiliar;",
							"var type;",
							"var schemaLocation;",
							"var baseType;",
							"var referredType;",
							"",
							"// Basic tests",
							"pm.test(\"Valida status 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//For to create a field thats used to check the value of @ fields",
							"for(var i=0; i<responseBody.length; i++){",
							"    if (responseBody[i] === \"@\"){",
							"        auxiliar = responseBody[i-1];",
							"        auxiliar = auxiliar.concat(responseBody[i]);",
							"        for (var j=i+1; j<responseBody.length ;j++){",
							"            auxiliar = auxiliar.concat(responseBody[j]);",
							"            if(responseBody[j] === \",\" ){",
							"                j=responseBody.length;",
							"            }",
							"        }",
							"        var help = auxiliar.split(\":\");",
							"        if(help[0].slice(2,help[0].length-1) === \"baseType\"){",
							"            baseType = auxiliar;",
							"        }",
							"        if(help[0].slice(2,help[0].length-1) === \"type\"){",
							"            type = auxiliar;",
							"        }",
							"        if(help[0].slice(2,help[0].length-1) === \"schemaLocation\"){",
							"            schemaLocation = auxiliar;",
							"        }",
							"        if(help[0].slice(2,help[0].length-1) === \"referredType\"){",
							"            referredType = auxiliar;",
							"        }",
							"    }",
							"}",
							"",
							"//---------------------Validaciones de Campos----------------------------",
							"pm.test(\"Valida campos\", function() {",
							"    for(i=0; i<jsonData.length; i++){",
							"        if (pm.expect(jsonData[i]).to.have.property(\"@baseType\")) {",
							"            pm.expect(validaCampoArroba(baseType)).to.be.equal(\"some text\");",
							"        }",
							"        if (pm.expect(jsonData[i]).to.have.property(\"@schemaLocation\")){",
							"            pm.expect(validaCampoArroba(schemaLocation)).to.be.equal(\"some text\");",
							"        }",
							"        if (pm.expect(jsonData[i]).to.have.property(\"@type\")) {",
							"            pm.expect(validaCampoArroba(type)).to.be.equal(\"some text\");",
							"        }",
							"        if (pm.expect(jsonData[i]).to.have.property(\"href\")) {",
							"            pm.expect(jsonData[i].href).to.be.equal(\"#/customer/parameters/ip\");",
							"        }",
							"        if (pm.expect(jsonData[i]).to.have.property(\"id\")) {",
							"            pm.expect(jsonData[i].id).to.be.equal(\"6600017\");",
							"        }",
							"        if (pm.expect(jsonData[i]).to.have.property(\"name\")) {",
							"            pm.expect(jsonData[i].name).to.be.equal(\"RUBEM\");",
							"        }",
							"        if (pm.expect(jsonData[i]).to.have.property(\"lastName\")) {",
							"            pm.expect(jsonData[i].lastName).to.be.equal(\"AFONZO\");",
							"        }",
							"        if (pm.expect(jsonData[i]).to.have.property(\"status\")) {",
							"            pm.expect(jsonData[i].status).to.be.equal(\"Activo\");",
							"        }",
							"        if (pm.expect(jsonData[i]).to.have.property(\"documentType\")) {",
							"            pm.expect(jsonData[i].documentType).to.be.equal(\"DNI\");",
							"        }",
							"        if (pm.expect(jsonData[i]).to.have.property(\"document\")) {",
							"            pm.expect(jsonData[i].document).to.be.equal(\"55556666\");",
							"        }",
							"        if (pm.expect(jsonData[i]).to.have.property(\"sex\")) {",
							"            pm.expect(jsonData[i].sex).to.be.equal(\"M\");",
							"        }",
							"        if (pm.expect(jsonData.hasOwnProperty(\"market\"))) {",
							"        pm.expect(jsonData[i].market).to.be.equal(\"some text\");",
							"        }",
							"        if (pm.expect(jsonData.hasOwnProperty(\"segment\"))) {",
							"        pm.expect(jsonData[i].segment).to.be.equal(\"Residencial\");",
							"        }",
							"        if (pm.expect(jsonData[i]).to.have.property(\"subsegment\")) {",
							"        pm.expect(jsonData[i].subsegment).to.be.equal(\"some text\");",
							"        }",
							"        if (pm.expect(jsonData.hasOwnProperty(\"statusReason\"))) {",
							"        pm.expect(jsonData[i].statusReason).to.be.equal(\"some text\");",
							"        }",
							"        // We just validate all the first part of the body",
							"        // Now we check the Account",
							"        for(j=0; j < jsonData[i].account.length; j++){",
							"            console.log(jsonData[i].account.length)",
							"            switch(j) {",
							"                case j=0:",
							"                    if (pm.expect(jsonData[i].account[j]).to.have.property(\"@referredType\")) {",
							"                        console.log(validaCampoArroba(referredType));",
							"                        pm.expect(validaCampoArroba(referredType)).to.be.equal(\"some text\");",
							"                    }",
							"                    if (pm.expect(jsonData[i].account[j]).to.have.property(\"description\")) {",
							"                        console.log(jsonData[i].account[j].description);",
							"                        pm.expect(jsonData[i].account[j].description).to.be.equal(\"some text\");",
							"                    }",
							"                    if (pm.expect(jsonData[i].account[j]).to.have.property(\"href\")) {",
							"                        console.log(jsonData[i].account[j].href);",
							"                        pm.expect(jsonData[i].account[j].href).to.be.equal(\"some text\");",
							"                    }",
							"                    if (pm.expect(jsonData[i].account[j]).to.have.property(\"id\")) {",
							"                        console.log(jsonData[i].account[j].id);",
							"                        pm.expect(jsonData[i].account[j].id).to.be.equal(\"545127\");",
							"                    }",
							"                    if (pm.expect(jsonData[i].account[j]).to.have.property(\"name\")) {",
							"                        console.log(jsonData[i].account[j].name);",
							"                        pm.expect(jsonData[i].account[j].name).to.be.equal(\"RUBEN\");",
							"                    }",
							"                    break;",
							"                case j=1:",
							"                    if (pm.expect(jsonData[i].account[j]).to.have.property(\"@referredType\")) {",
							"                        console.log(validaCampoArroba(referredType));",
							"                        pm.expect(validaCampoArroba(referredType)).to.be.equal(\"some text\");",
							"                    }",
							"                    if (pm.expect(jsonData[i].account[j]).to.have.property(\"description\")) {",
							"                        console.log(jsonData[i].account[j].description);",
							"                        pm.expect(jsonData[i].account[j].description).to.be.equal(\"some text\");",
							"                    }",
							"                    if (pm.expect(jsonData[i].account[j]).to.have.property(\"href\")) {",
							"                        console.log(jsonData[i].account[j].href);",
							"                        pm.expect(jsonData[i].account[j].href).to.be.equal(\"some text\");",
							"                    }",
							"                    if (pm.expect(jsonData[i].account[j]).to.have.property(\"id\")) {",
							"                        console.log(jsonData[i].account[j].id);",
							"                        pm.expect(jsonData[i].account[j].id).to.be.equal(\"1802033\");",
							"                    }",
							"                    if (pm.expect(jsonData[i].account[j]).to.have.property(\"name\")) {",
							"                        console.log(jsonData[i].account[j].name);",
							"                        pm.expect(jsonData[i].account[j].name).to.be.equal(\"RUBEN\");",
							"                    }",
							"                    break;",
							"                default:",
							"                    console.log(\"no accounts\");",
							"                    break;",
							"            }",
							"        }",
							"        if (jsonData[i].hasOwnProperty(\"contactMedium\") === false) {",
							"            return false;",
							"        }",
							"        for (var k=0; k < jsonData[i].contactMedium.length; k++) {",
							"            if (jsonData[i].contactMedium[k].hasOwnProperty(\"characteristic\") === false) {",
							"                return false;",
							"            }",
							"            if (pm.expect(jsonData[i].contactMedium[k].characteristic).to.have.property(\"city\")) {",
							"            pm.expect(jsonData[i].contactMedium[k].characteristic.city).to.be.equal(\"CABA\");",
							"            }",
							"            if (pm.expect(jsonData[i].contactMedium[k].characteristic).to.have.property(\"country\")) {",
							"            pm.expect(jsonData[i].contactMedium[k].characteristic.country).to.be.equal(\"ARGENTINA\")",
							"            }",
							"            if (pm.expect(jsonData[i].contactMedium[k].characteristic).to.have.property(\"stateOrProvince\")) {",
							"            pm.expect(jsonData[i].contactMedium[k].characteristic.stateOrProvince).to.be.equal(\"BUENOS AIRES\")",
							"            }",
							"            if (pm.expect(jsonData[i].contactMedium[k].characteristic).to.have.property(\"addressId\")) {",
							"            pm.expect(jsonData[i].contactMedium[k].characteristic.addressId).to.be.equal(\"33344986\")",
							"            }",
							"            if (pm.expect(jsonData[i].contactMedium[k].characteristic).to.have.property(\"address\")) {",
							"            pm.expect(jsonData[i].contactMedium[k].characteristic.address).to.be.equal(\"ARMENIA /ALT/ 30\")",
							"            }",
							"            if (pm.expect(jsonData[i].contactMedium[k].characteristic).to.have.property(\"locationId\")) {",
							"            pm.expect(jsonData[i].contactMedium[k].characteristic.locationId).to.be.equal(\"1135\")",
							"            }",
							"            if (pm.expect(jsonData[i].contactMedium[k].characteristic).to.have.property(\"location\")) {",
							"            pm.expect(jsonData[i].contactMedium[k].characteristic.location).to.be.equal(\"SARANDI\")",
							"            }",
							"            if (pm.expect(jsonData[i].contactMedium[k].characteristic).to.have.property(\"zoneId\")) {",
							"            pm.expect(jsonData[i].contactMedium[k].characteristic.zoneId).to.be.equal(\"some text\")",
							"            }",
							"            if (pm.expect(jsonData[i].contactMedium[k].characteristic).to.have.property(\"zone\")) {",
							"            pm.expect(jsonData[i].contactMedium[k].characteristic.zone).to.be.equal(\"some text\")",
							"            }",
							"            if (pm.expect(jsonData[i].contactMedium[k].characteristic).to.have.property(\"isUrban\")) {",
							"            pm.expect(jsonData[i].contactMedium[k].characteristic.isUrban).to.be.equal(\"some text\")",
							"            }",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/CustomerManagement/v1/customer/ip/152.168.141.172",
					"host": [
						"{{host}}"
					],
					"path": [
						"CustomerManagement",
						"v1",
						"customer",
						"ip",
						"152.168.141.172"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}